<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.silverfox.finance.orm.ProductDao">

 <resultMap type="Product" id="resultMap">
  <id column="id" property="id" jdbcType="INTEGER"/>
  <result column="name" property="name" jdbcType="VARCHAR"/>
  <result column="year_income" property="yearIncome" jdbcType="FLOAT"/> 
  <result column="loan_year_income" property="loanYearIncome" jdbcType="FLOAT"/>
  <result column="increase_interest" property="increaseInterest" jdbcType="FLOAT"/>
  <result column="initial_total_amount" property="initialTotalAmount" jdbcType="INTEGER"/> 
  <result column="total_amount" property="totalAmount" jdbcType="INTEGER"/>
  <result column="actual_amount" property="actualAmount" jdbcType="INTEGER"/>
  <result column="raise_period" property="raisePeriod" jdbcType="INTEGER"/>
  <result column="lowest_money" property="lowestMoney" jdbcType="INTEGER"/>
  <result column="highest_money" property="highestMoney" jdbcType="INTEGER"/>
  <result column="finance_period" property="financePeriod" jdbcType="INTEGER"/>
  <result column="sort_number" property="sortNumber" jdbcType="INTEGER"/>
  <result column="shipped_time" property="shippedTime" jdbcType="TIMESTAMP"/>
  <result column="interest_date" property="interestDate" jdbcType="VARCHAR"/>
  <result column="label" property="label" jdbcType="VARCHAR"/>
  <result column="status" property="status" jdbcType="TINYINT"/>
  <result column="display_platform" property="displayPlatform" jdbcType="VARCHAR"/>
  <result column="version" property="version" jdbcType="INTEGER"/>
  <result column="interest_type" property="interestType" jdbcType="INTEGER"/>
  <association property="category" javaType="ProductCategory">
    	<id column="category_id" property="id" jdbcType="INTEGER" />
    	<result column="property" property="property" jdbcType="VARCHAR"/>
    	<result column="productCategoryName" property="name" jdbcType="VARCHAR" />
  </association>
  <association property="bonus" javaType="Bonus">
    <id column="bonus_id" property="id" jdbcType="INTEGER" />
    <result column="bonus_name" property="name" jdbcType="VARCHAR" />
    <result column="give_type" property="giveType" jdbcType="TINYINT" />
    <result column="first_order" property="firstOrder" jdbcType="VARCHAR" />
    <result column="last_order" property="lastOrder" jdbcType="INTEGER" />
  </association>
  <association property="merchant" javaType="Merchant">
     <id column="merchant_id" property="id" jdbcType="INTEGER" />
     <result column="merchant_name" property="name" jdbcType="VARCHAR" />
  </association>     
 </resultMap>
 <sql id="columns">
   p.id as id, p.name as name, p.year_income, p.loan_year_income, p.category_id, p.increase_interest, p.display_platform, pc.property as property, pc.name as productCategoryName, 
   p.initial_total_amount,p.total_amount, p.actual_amount, p.finance_period, p.raise_period, p.lowest_money, p.highest_money, p.sort_number, p.shipped_time, 
   p.interest_date, p.interest_type, p.bonus_id, p.status, p.label, p.merchant_id,
   p.version, b.name as bonus_name, b.give_type, b.first_order, b.last_order
  </sql>
   <select id="queryForMerchantLoanCount" parameterType="int" resultType="int">
     select COUNT(id) from product where merchant_id = #{merchantIdData};
  </select>
   <select id="queryTotalNumberMark"  resultType="int">
     select count(pd.id) from product_detail pd
          left join project pr on pd.project_id = pr.id
          where pr.type = 1
  </select>
  <select id="selectById" parameterType="int" resultMap="resultMap">
      select  
      <include refid="columns" />, m.id as merchant_id, m.name as merchant_name
      from product p 
      left join product_category pc on p.category_id = pc.id 
      left join bonus b on b.id=p.bonus_id
      left join merchant m on m.id = p.merchant_id
      where p.id = #{id} 
  </select>
  <select id="queryProductIncomeAmountByMonth" parameterType="int" resultType="ReceivablesEntity" >
    select DATE_FORMAT(DATE_ADD( interest_date, INTERVAL finance_period DAY ), '%Y-%m') as dueDate , 
    	cast(SUM(actual_amount*year_income*finance_period/(365*100)) as decimal(15,2)) as productIncome
   	from product where category_id IN (select id from product_category where property='COMMON' OR property='ACTIVITY' ) 
		and merchant_id = #{id, jdbcType=INTEGER}
		and #{systemMonth} > DATE_FORMAT(DATE_ADD( interest_date, INTERVAL finance_period DAY ), '%Y-%m') 
		and id in (select product_id from  customer_order where is_payback=1 group by product_id)
		group by DATE_FORMAT(DATE_ADD( interest_date, INTERVAL finance_period DAY ), '%Y-%m')
		order by DATE_FORMAT(DATE_ADD( interest_date, INTERVAL finance_period DAY ), '%Y-%m') desc
	<choose>
	  <when test="offset > 0 and size > 0">
	     <![CDATA[
	     limit #{offset}, #{size}
	     ]]>
	  </when>
	  <when test="size > 0">
	     <![CDATA[
	     limit 0, #{size}
	     ]]>
	  </when>
	  <otherwise>
	  <![CDATA[
	   limit 0, 15
	  ]]>
	  </otherwise>
	</choose>
 </select><select id="queryInMoneys" resultType="ProductTradeEntity" >
   <![CDATA[
    select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
	sum(co.principal) inMoney
	from customer_order co
	left join product p on p.id = co.product_id 
	where DATE_FORMAT(co.order_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.order_time,'%Y-%m-%d')
	group by aid
   ]]>
 </select>

 <select id="queryOutMoneys" resultType="ProductTradeEntity" >
 	<if test="type == 1">
 		<![CDATA[
	    select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		sum(co.payback_amount) outMoney
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(co.payback_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.payback_time,'%Y-%m-%d')
		group by aid
	   ]]>
 	</if>
 	<if test="type == 2">
 		<![CDATA[
 		select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		sum(co.principal + ceil(co.principal*p.finance_period*(p.increase_interest+p.year_income)/365)/100 + IF(co.interest_period=0,co.coupon_amount,IF(p.finance_period >= co.interest_period,co.principal*co.interest_period*co.coupon_amount/36500,co.principal*p.finance_period*co.coupon_amount/36500))) outMoney
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d')
		group by aid
		]]>
 	</if>
 </select>
 <select id="queryInTotals" resultType="ProductTradeEntity" >
   <![CDATA[
    select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
	count(1) inTotal
	from customer_order co
	left join product p on p.id = co.product_id 
	where DATE_FORMAT(co.order_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.order_time,'%Y-%m-%d')
	group by aid
   ]]>
 </select>
 <select id="queryOutTotals" resultType="ProductTradeEntity" >
 	<if test="type == 1">
 		<![CDATA[
	    select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		count(1) outTotal
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(co.payback_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.payback_time,'%Y-%m-%d')
		group by aid
	   ]]>
	   
 	</if>
   <if test="type == 2">
 		<![CDATA[
 		select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		count(1) outTotal
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d')
		group by aid
		]]>
 	</if>
 </select>
 <select id="queryInPeoples" resultType="ProductTradeEntity" >
   <![CDATA[
     select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
	count(DISTINCT customer_id) inPeople
	from customer_order co
	left join product p on p.id = co.product_id 
	where DATE_FORMAT(co.order_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.order_time,'%Y-%m-%d')
	group by aid
   ]]>
 </select>
 <select id="queryOutPeoples" resultType="ProductTradeEntity" >
   <if test="type == 1">
	   	<![CDATA[
	    select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		count(DISTINCT customer_id) outPeople
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(co.payback_time,'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(co.payback_time,'%Y-%m-%d')
		group by aid
	   ]]>
   </if>
   <if test="type == 2">
 		<![CDATA[
 		select IF(p.finance_period < 30, 1, IF(p.finance_period >= 30 and p.finance_period < 70,2,IF(p.finance_period >= 70 and p.finance_period < 180,3,IF(p.finance_period >= 180,4,false)))) aid,
		count(DISTINCT customer_id) outPeople
		from customer_order co
		left join product p on p.id = co.product_id 
		where DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d') >= #{beginTime} and #{endTime} >= DATE_FORMAT(ADDDATE(co.order_time,p.finance_period),'%Y-%m-%d')
		group by aid
		]]>
 	</if>
  </select>
  <select id="queryProductIncomeById" resultType="FLOAT" >
    select COALESCE(cast(SUM(actual_amount*year_income*finance_period/(365*100)) as decimal(15,2)),0) as productIncome  
   from product where category_id IN (select id from product_category where property='COMMON' OR property='ACTIVITY' ) 
   		and merchant_id = #{id, jdbcType=INTEGER} 
		and DATE_FORMAT(DATE_ADD(interest_date, INTERVAL finance_period DAY ), '%Y-%m-%d')  &lt;= DATE_FORMAT(#{yesterday,jdbcType=VARCHAR}, '%Y-%m-%d') 
		and id in (select product_id from  customer_order where is_payback=1 group by product_id)
 </select>
  <select id="selectAllByName" resultType="int">
	select count(p.id) from product p where name = #{name}
 </select>

	<select id="queryForCount" resultType="int">
		select count(p.id) from product p
		left join product_category pc on
		p.category_id = pc.id
		<if test="status == 'PAYMENTING' or status == 'PAYMENTED'">
			left join merchant_order mo on mo.product_id = p.id and
			mo.type = 1
		</if>
		<if test="status == 'PAYBACKING' or status == 'PAYBACKED'">
			left join merchant_order mo on mo.product_id = p.id and
			mo.type = 0
		</if>
		<where>
			pc.property != 'TREASURE'
			<if test="name != null">
				and p.name like '%${name}%'
			</if>
			<if test="risk != null">
				and p.risk = #{risk}
			</if>
			<if test="categoryId >0 ">
				and p.category_id = #{categoryId}
			</if>
			<if test="merchantId > 0">
				and p.merchant_id = #{merchantId}
			</if>
			<if test="periodStart > 0 and periodEnd > 0">
			
			
			
	   <![CDATA[ and p.finance_period >= '${periodStart}' and p.finance_period <= '${periodEnd}']]>
			</if>
			<choose>
				<when test="status == 'NOTSTARTED'">
           <![CDATA[ and  (p.shipped_time = '1970-01-01 08:00:00') and p.status = 1  ]]>
				</when>
				<when test="status == 'INTHESALE'">
                   <![CDATA[ and  p.status = 1  and (p.total_amount > p.actual_amount)  and  (P.shipped_time >'1970-01-01 08:00:00')]]>
				</when>
				<when test="status == 'WAITAUDIT'">
           <![CDATA[ and p.status in (0,2,3) ]]>
				</when>
				<when test="status == 'PAYMENTING' or status == 'PAYBACKING' ">
        	<![CDATA[ and mo.status = 1 ]]>
				</when>
				<when test="status == 'PAYMENTED' or status == 'PAYBACKED'">
        	<![CDATA[ and mo.status = 2 ]]>
				</when>
				<when test="status == 'SOLDOUT'">
           <![CDATA[ and (p.actual_amount >= p.total_amount) ]]>
				</when>
				<when test="status == 'PASSED'">
           <![CDATA[ and p.status = 1 and (p.total_amount > p.actual_amount) ]]>
				</when>
			</choose>
			<!-- <choose> <when test="financePeriod == 0"> <![CDATA[ and 90 >= p.finance_period]]> 
				</when> <when test="financePeriod == 90"> <![CDATA[ and (180 >= p.finance_period 
				and p.finance_period > 90) ]]> </when> <when test="financePeriod == 180"> 
				<![CDATA[ and p.finance_period > 180 ]]> </when> </choose> -->
		</where>
	</select>
    <select id="queryForCountTreasure" resultType="int">
        select count(p.id)
        from product p
        left join product_category pc on p.category_id = pc.id
        left join bonus b on b.id=p.bonus_id
        <where>
            pc.property = 'TREASURE'
            <if test="name != null">
                and p.name like '%${name}%'
            </if>
            <if test="auditStatus != null and auditStatus >= 0 ">
                and p.status = ${auditStatus}
            </if>
            <if test="merchantId > 0">
                and p.merchant_id = #{merchantId}
            </if>
            <choose>
                <when test="status == 'NOTSTARTED'">
                    <![CDATA[ and p.shipped_time >  DATE_FORMAT(#{systemTime}, '%Y-%m-%d %H:%i:%s') and p.status = 1 and (p.total_amount > p.actual_amount)  ]]>
                </when>
                <when test="status == 'INTHESALE'">
                    <![CDATA[ and DATE_FORMAT(#{systemTime}, '%Y-%m-%d %H:%i:%s') >= p.shipped_time and p.shipped_time > '1970-01-01 08:00:00' and p.status = 1 and (p.total_amount > p.actual_amount) ]]>
                </when>
                <when test="status == 'SOLDOUT'">
                    <![CDATA[ and (p.actual_amount >= p.total_amount) ]]>
                </when>
            </choose>
        </where>
    </select>
	<select id="queryForList" resultMap="resultMap">
		select
		<include refid="columns" />
		from product p
		left join product_category pc on p.category_id = pc.id
		left join bonus b on b.id=p.bonus_id
		<if test="status == 'PAYMENTING' or status == 'PAYMENTED'">
			left join merchant_order mo on mo.product_id = p.id and
			mo.type = 1
		</if>
		<if test="status == 'PAYBACKING' or status == 'PAYBACKED'">
			left join merchant_order mo on mo.product_id = p.id and
			mo.type = 0
		</if>
		<where>
			pc.property != 'TREASURE'
			<if test="name != null">
				and p.name like '%${name}%'
			</if>
			<if test="risk != null">
				and p.risk = #{risk}
			</if>
			<if test="categoryId > 0">
				and p.category_id = #{categoryId}
			</if>
			<if test="merchantId > 0">
				and p.merchant_id = #{merchantId}
			</if>
			<if test="periodStart > 0 and periodEnd > 0">
	  	<![CDATA[ and p.finance_period >= '${periodStart}' and p.finance_period <= '${periodEnd}']]>
			</if>
			<choose>
				<when test="status == 'NOTSTARTED'">
                  <![CDATA[ and  (p.shipped_time = '1970-01-01 08:00:00') and p.status = 1  ]]>
				</when>
				<when test="status == 'INTHESALE'">
                   <![CDATA[ and  p.status = 1  and (p.total_amount > p.actual_amount)  and  (P.shipped_time >'1970-01-01 08:00:00')]]>
				</when>
				<when test="status == 'WAITAUDIT'">
             <![CDATA[ and p.status in (0,2,3) ]]>
				</when>
				<when test="status == 'PAYMENTING' or status == 'PAYBACKING' ">
        	 <![CDATA[ and mo.status = 1 ]]>
				</when>
				<when test="status == 'PAYMENTED' or status == 'PAYBACKED'">
        	<![CDATA[ and mo.status = 2 ]]>
				</when>
				<when test="status == 'SOLDOUT'">
             <![CDATA[ and (p.actual_amount >= p.total_amount) ]]>
				</when>
				<when test="status == 'PASSED'">
           <![CDATA[ and p.status = 1 and (p.total_amount > p.actual_amount) ]]>
				</when>
			</choose>
		</where>
		<if test="status == 'INTHESALE'">
   		<![CDATA[
			order by
			IF((p.status =1 and p.shipped_time > NOW()),1,IF((p.status =1 and p.shipped_time <= NOW() and (p.actual_amount < p.total_amount)),0,2)),            
			IF((p.status =1 and  p.actual_amount < p.total_amount), p.sort_number, false) desc,  
			p.finance_period asc, p.id asc
	   	]]>
		</if>
		<if test="status == 'NOTSTARTED'">
   		<![CDATA[
		  order by  p.finance_period asc ,
          case pc.property  when  'ACTIVITY' then 1  when 'COMMON' then 2 end asc,
          p.id asc
	   	]]>
		</if>
		<if test="status == 'WAITAUDIT'">
   		<![CDATA[
			order by p.status asc, p.finance_period desc, p.id desc
	   	]]>
		</if>
		<if test="status != 'INTHESALE' and status != 'WAITAUDIT' and status != 'NOTSTARTED'">
	    <![CDATA[
	   		 order by 
	   		 IF(p.status =0,0,IF(p.status = 1,2,1)),  
	 			 IF(p.status in (0,2), p.finance_period, true) desc, 
	 			 IF((p.status =1 and p.shipped_time > #{systemTime}),1,IF((p.status =1 and p.shipped_time <= #{systemTime} and (p.actual_amount < p.total_amount)),0,2)), 
	 			 IF((p.status =1 and (p.actual_amount < p.total_amount)), p.sort_number, false) desc, 
	 			 IF((p.status =0), p.finance_period, false) desc,
			 IF((p.status =2), p.shipped_time, false) desc,
			 p.shipped_time desc ,p.id desc 
	    ]]>
		</if>
		<choose>
			<when test="offset > 0 and size > 0">
	     <![CDATA[
	     limit #{offset}, #{size}
	     ]]>
			</when>
			<when test="size > 0">
	     <![CDATA[
	     limit 0, #{size}
	     ]]>
			</when>
			<otherwise>
	  <![CDATA[
	   limit 0, 15
	  ]]>
			</otherwise>
		</choose>
	</select>

	<select id="queryForListTreasure" resultMap="resultMap">
		select
		<include refid="columns" />
		from product p
		left join product_category pc on p.category_id = pc.id
		left join bonus b on b.id=p.bonus_id
		<where>
			pc.property = 'TREASURE'
			<if test="name != null">
				and p.name like '%${name}%'
			</if>
			<if test="auditStatus != null and auditStatus >= 0 ">
				and p.status = #{auditStatus}
			</if>
			<if test="merchantId > 0">
				and p.merchant_id = #{merchantId}
			</if>
			<choose>
				<when test="status == 'NOTSTARTED'">
             <![CDATA[ and p.shipped_time >  DATE_FORMAT(#{systemTime}, '%Y-%m-%d %H:%i:%s') and p.status = 1 and (p.total_amount > p.actual_amount)  ]]>
				</when>
				<when test="status == 'INTHESALE'">
             <![CDATA[ and DATE_FORMAT(#{systemTime}, '%Y-%m-%d %H:%i:%s') >= p.shipped_time  and p.status = 1 and (p.total_amount > p.actual_amount) ]]>
				</when>
				<when test="status == 'SOLDOUT'">
             <![CDATA[ and (p.actual_amount >= p.total_amount) ]]>
				</when>
			</choose>
		</where>
    <![CDATA[
    	order by
    	IF(p.status =0,0,IF(p.status = 1,2,1)),  
		IF((p.status =1 and p.shipped_time > NOW()),1,IF((p.status =1 and p.shipped_time <= NOW() and (p.actual_amount < p.total_amount)),0,2)),            
		IF((p.status =1 and p.shipped_time <= NOW() and (p.actual_amount < p.total_amount)), p.sort_number, false) desc,   
		p.shipped_time desc, p.id desc
    ]]>
		<choose>
			<when test="offset > 0 and size > 0">
	     <![CDATA[
	     limit #{offset}, #{size}
	     ]]>
			</when>
			<when test="size > 0">
	     <![CDATA[
	     limit 0, #{size}
	     ]]>
			</when>
			<otherwise>
	  <![CDATA[
	   limit 0, 15
	  ]]>
			</otherwise>
		</choose>
	</select>

	<select id="selectProductByBonusId" resultType="product">
		select p.id,
		p.name, p.status, p.total_amount totalAmount, p.actual_amount
		actualAmount, p.shipped_time shippedTime
		from product p where
		p.bonus_id = #{bonusId} and p.status = 1
	</select>
    <select id="queryProductName" resultType="String">
		SELECT `name` FROM `product` WHERE id = #{id};
	</select>
	
	<update id="update" parameterType="Product" >
     update product
     <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="category != null and category.id >0 " >
        category_id = #{category.id,jdbcType=INTEGER},
      </if>
      <if test="yearIncome > 0" >
        year_income = #{yearIncome,jdbcType=FLOAT},
      </if>
      <if test="loanYearIncome > 0" >
        loan_year_income = #{loanYearIncome,jdbcType=FLOAT},
      </if>
      <if test="increaseInterest >= 0" >
        increase_interest = #{increaseInterest,jdbcType=FLOAT},
      </if>
      <if test="initialTotalAmount > 0" >
        initial_total_amount = #{initialTotalAmount,jdbcType=INTEGER},
      </if>
      <if test="totalAmount > 0" >
        total_amount = #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="actualAmount > 0" >
        actual_amount = #{actualAmount,jdbcType=INTEGER},
      </if>
      <if test="financePeriod > 0">
      	finance_period = #{financePeriod,jdbcType=INTEGER},
      </if>
      <if test="raisePeriod > 0">
        raise_period = #{raisePeriod,jdbcType=SMALLINT},
      </if>
      <if test="lowestMoney > 0">
        lowest_money = #{lowestMoney,jdbcType=INTEGER},
      </if>
       <if test="highestMoney">
        highest_money = #{highestMoney,jdbcType=INTEGER},
      </if>
      <if test="sortNumber">
        sort_number = #{sortNumber,jdbcType=VARCHAR},
      </if>
      <if test="shippedTime != null">
        shipped_time = #{shippedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="soldOutTime != null">
        sold_out_time = #{soldOutTime,jdbcType=TIMESTAMP},
      </if>
      <if test="interestDate">
        interest_date = #{interestDate,jdbcType=VARCHAR},
      </if>
       <if test="interestType != null">
        interest_type = #{interestType,jdbcType=INTEGER},
      </if>
      <if test="label">
        label = #{label,jdbcType=VARCHAR},
      </if>
      <if test="bonus != null and bonus.id >= 0">
        bonus_id = #{bonus.id,jdbcType=INTEGER},
      </if>
      <if test="status >= 0">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="merchant != null and merchant.id > 0">
        merchant_id = #{merchant.id,jdbcType=INTEGER},
      </if>
       version = (select prtt.version from(select max(prt.version)+1 version from product prt)prtt)
      </set>
     where id = #{id,jdbcType=INTEGER}
    </update>
    
    <insert id="insert"  parameterType="Product" useGeneratedKeys="true" keyProperty="id">
    insert into product
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        name,
      </if>
      <if test="yearIncome > 0" >
        year_income,
      </if>
      <if test="loanYearIncome > 0" >
        loan_year_income,
      </if>
      <if test="increaseInterest > 0" >
        increase_interest,
      </if>
      <if test="category != null and category.id > 0 " >
        category_id,
      </if>
      	initial_total_amount,
      <if test="totalAmount > 0" >
        total_amount,
      </if>
      <if test="financePeriod > 0 ">
      	finance_period,
      </if>
      <if test="raisePeriod > 0">
        raise_period,
      </if>
      <if test="lowestMoney > 0">
        lowest_money,
      </if>
      <if test="highestMoney > 0">
        highest_money,
      </if>
        sort_number,
      <if test="shippedTime != null">
        shipped_time,
      </if>
      <if test="interestDate != null">
        interest_date,
      </if>
      <if test="interestType != null">
        interest_type,
      </if>
      <if test="label != null">
        label,
      </if>
      <if test="displayPlatform != null">
        display_platform,
      </if>
      <if test="bonus!= null and bonus.id > 0">
        bonus_id,
      </if>
      <if test="merchant != null and merchant.id > 0">
        merchant_id,  
      </if>
      version
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="yearIncome > 0" >
        #{yearIncome,jdbcType=FLOAT},
      </if>
      <if test="loanYearIncome > 0" >
        #{loanYearIncome,jdbcType=FLOAT},
      </if>
      <if test="increaseInterest > 0" >
        #{increaseInterest,jdbcType=FLOAT},
      </if>
      <if test="category != null and category.id >0 " >
        #{category.id,jdbcType=INTEGER},
      </if>
      	#{totalAmount,jdbcType=FLOAT},
      <if test="totalAmount > 0" >
        #{totalAmount,jdbcType=FLOAT},
      </if>
      <if test="financePeriod > 0">
      	#{financePeriod,jdbcType=INTEGER},
      </if>
      <if test="raisePeriod > 0">
        #{raisePeriod,jdbcType=INTEGER},
      </if>
      <if test="lowestMoney > 0">
        #{lowestMoney,jdbcType=INTEGER},
      </if>
       <if test="highestMoney > 0">
        #{highestMoney,jdbcType=INTEGER},
      </if>
      (select t.sortNumber from (select IF(max(id) is not null ,max(id)+1,999) sortNumber from product) t),
      <if test="shippedTime != null">
        #{shippedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="interestDate != null">
        #{interestDate,jdbcType=VARCHAR},
      </if>
      <if test="interestType != null">
        #{interestType,jdbcType=INTEGER},
      </if>
      <if test="label != null">
        #{label,jdbcType=VARCHAR},
      </if>
      <if test="displayPlatform != null">
        #{displayPlatform,jdbcType=VARCHAR},
      </if>
      <if test="bonus != null and bonus.id > 0">
        #{bonus.id,jdbcType=INTEGER},
      </if>
      <if test="merchant != null and merchant.id > 0">
        #{merchant.id,jdbcType=INTEGER},
      </if>
      (select IFNULL(max(prt.version), 0)+1 from product prt)
    </trim>
  </insert>
  
  <update id="updateDisplayPlatform">
      update product 
      <set>
         display_platform = #{displayPlatform,jdbcType=VARCHAR}
      </set>
      where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="queryForCountByCategoryProperty" resultType="int">
   	select <![CDATA[ count(p.id) from product p left join product_category pc on p.category_id = pc.id  where pc.property = #{property} ]]>
  </select>
  
   <update id="updateSort">
      <foreach collection="products" item="product" index="index" separator=";">
			update product 
			<set>
			  sort_number = #{product.sortNumber}
			</set>
			where id = ${product.id}
	   </foreach>
  </update> 
   <update id="changeProductStatus">
      update product set `status` = 0 where id = #{id}
  </update>
  
  <select id="queryInTheSale" resultMap="resultMap">
      select
		<include refid="columns" />
		from product p
		left join product_category pc on p.category_id = pc.id
		left join bonus b on b.id=p.bonus_id
		<where>
		pc.property != 'TREASURE' and  p.status = 1  and (p.total_amount > p.actual_amount)  and  (P.shipped_time >'1970-01-01 08:00:00')
		</where>
      <![CDATA[
		order by
		IF((p.status =1 and p.shipped_time > NOW()),1,IF((p.status =1 and p.shipped_time <= NOW() and (p.actual_amount < p.total_amount)),0,2)),            
		IF((p.status =1 and  p.actual_amount < p.total_amount), p.sort_number, false) desc,  
		p.finance_period asc, p.id asc
	   	]]>
  </select>
</mapper>